# -*- coding: utf-8 -*-
"""ProyectoFinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ixc5oiSb7o31wtYPSskvPuHkaxGBEnms
"""



"""#Extraccion, Analisis y Gestion de datos para InnovateTech

##Instalo librerias
"""

!pip install pandas==2.2.2

!pip install numpy

!pip install openpyxl

!pip install pyarrow

!pip install fastparquet

!pip install lxml

import pandas as pd
import numpy as np
import json
import os

"""## Carga de archivos CSV en DataFrame de Pandas

Cargamos archivos originales para luego analizarlos.

##Customers
"""

#Importo Dataset como DataFrame, muestro 5 filas para verificar
df_customers = pd.read_csv("https://raw.githubusercontent.com/VeroScoCian/Proyecto-final/main/ecommerce_customers_dataset.csv")
df_customers.head()

"""##Order items"""

#Importo Dataset como DataFrame, muestro 5 filas para verificar
df_order_items = pd.read_csv("https://raw.githubusercontent.com/VeroScoCian/tpf/main/ecommerce_order_items_dataset.csv")
df_order_items.head()

"""##Orders"""

#Importo Dataset comoDataFrame, muestro 5 filas para verificar
df_order = pd.read_csv("https://raw.githubusercontent.com/VeroScoCian/Proyecto-final/main/ecommerce_orders_dataset.csv")
df_order.head()

"""##Payments"""

#Importo Dataset comoDataFrame, muestro 5 filas para verificar
df_payments= pd.read_csv("https://raw.githubusercontent.com/VeroScoCian/Proyecto-final/main/ecommerce_order_payments_dataset.csv")
df_payments.head()

"""##Products"""

#Importo Dataset comoDataFrame, muestro 5 filas para verificar
df_products = pd.read_csv("https://raw.githubusercontent.com/VeroScoCian/Proyecto-final/main/ecommerce_products_dataset.csv")
df_products.head()

"""#Datos DataFrame

Analizaremos composicion, tamaño, tipo de datos y cantidad de nulos de cada DataFrame.

### Funcion datos *DataFrame*
"""

#Funcion para cantidad y tipos de datos. Luego la utilizaremos para cada DataFrame
def datosDataFrame(df):
  print("Tamaño de DataFrame:")
  print(df.shape) #Pedimos que imprima tamaño
  print("---------")
  print("Analisis de tipo de Datos:")
  print(df.info()) #Pedimos que imprima el tipo de datos
  print("---------")
  print("Recuento de nulos:")
  print(df.isnull().sum()) #Analizamos nulos
  print("---------")
  print("Recuento de duplicados:")
  print(df.duplicated().sum()) #Analizamos duplicados

"""###Customers"""

#Aplicamos la funcion
datosDataFrame(df_customers)

"""###Order Items"""

#Aplicamos la funcion
datosDataFrame(df_order_items)

"""###Orders"""

#Aplicamos la funcion
datosDataFrame(df_order)

"""###Payments"""

#Aplicamos la funcion
datosDataFrame(df_payments)

"""###Products"""

#Aplicamos la funcion
datosDataFrame(df_products)

"""# Transformacion DataFrame
En esta seccion del codigo nos encargamos de realizar funciones correspondientes para evitar posibles problemas a futuro.
Estas funciones nos ayudaran a tener un cnjunto de datos homogeneos, como asi tambien, la eliminacion de ser necesario de filas con datos nulos.

###Funcion transformarFechas
"""

#Funcion para transformar a datetime
def transformarFechas(df, columnas_fechas):
  df[columnas_fechas] = df[columnas_fechas].apply(pd.to_datetime) #Transformamos la columna_fechas a datetime

"""###Funcion TransformarString"""

#Funcion para transformar a string
def transformarString(df, columnas_string): #Los parametros son el dataframe y la lista con las columnas a transformar
    for columna in columnas_string: #Transforma las columnas en columnas_string a string
        df[columna] = df[columna].astype("string")
    return df



"""###Funcion TransformarMayusculas"""

#Definimos nuestra función convertirMayusculas
def transformarMayusculas(df, columna): #Los parametros son el dataframe y la lista con las columna a transformar
    df[columna] = df[columna].str.upper() # Convertir todos los valores de la columna a mayusculas
    return df

"""###Funcion Transformar Minusculas"""

#Funcion para convertir a Minusculas
def transformarMinusculas(df, columna):
  df[columna] = df[columna].str.lower() #convertimos los valores de la columna a minuscula
  return df

"""###Customers"""

# Lista de columnas a transfomar en string
columnas_string_customers = ["customer_id","customer_unique_id","customer_zip_code_prefix", "customer_city","customer_state"]

#Aplicamos nuestra funcion conversora de string
df_customers = transformarString(df_customers, columnas_string_customers)



#Revisamos que los tipos de datos sean correctos
df_customers.info()

#Aplicamos la conversion a minusculas
df_customers = transformarMinusculas(df_customers, "customer_city")

#Aplicamos la conversion a mayusculas
df_customers = transformarMayusculas(df_customers, "customer_state")

"""###Order Items"""

# Lista de columnas que contienen fechas
columnas_fechas_order_items = ['shipping_limit_date']

#Aplicamos nuestra funcion conversora de fechas
df_order_items = transformarFechas(df_order_items, columnas_fechas_order_items)

# Lista de columnas a transfomar en string
columnas_string_order_items = ["order_id","order_item_id","product_id","seller_id"]

#Aplicamos nuestra funcion conversora de string
df_order_items = transformarString(df_order_items, columnas_string_order_items)

"""###Orders"""

# Porcentaje de nulos en cada columna
null_percentages_orders = (df_order.isnull().sum() / len(df_order)) * 100

#Veamos cual es el % de nulos
print(null_percentages_orders)

# Filtramos las columnas con menos del 10% de valores nulos
columns_to_keep_orders = null_percentages_orders[null_percentages_orders <= 10].index

# Eliminamos las filas con nulos solo en las columnas seleccionadas
df_order.dropna(subset=columns_to_keep_orders, inplace=True)

#Chequeo cantidad de null
df_order.isnull().sum()

# Lista de columnas que contienen fechas
columnas_fechas_orders = ['order_purchase_timestamp', 'order_approved_at',
                          'order_delivered_carrier_date', 'order_delivered_customer_date',
                          'order_estimated_delivery_date']

#Aplicamos nuestra funcion conversora de fechas
df_order = transformarFechas(df_order, columnas_fechas_orders)

# Lista de columnas a transfomar en string
columnas_string= ["order_id","customer_id","order_status"]

#Aplicamos nuestra funcion conversora de string
df_order = transformarString(df_order, columnas_string)

#Revisamos que los tipos de datos sean correctos
df_order.info()

#Aplicamos la conversion a minusculas
df_order = transformarMinusculas(df_order, "order_status")

"""###Payments"""

# Lista de columnas a transfomar en string
columnas_string_payments = ["order_id","payment_type"]

#Aplicamos nuestra funcion conversora de string
df_payments = transformarString(df_payments, columnas_string_payments)

#Aplicamos la conversion a minusculas
df_payments = transformarMinusculas(df_payments, "payment_type")

"""###Products"""

# Porcentaje de nulos en cada columna
null_percentages_products = (df_products.isnull().sum() / len(df_products)) * 100

print(null_percentages_products)

# Filtramos las columnas con menos del 10% de valores nulos
columns_to_keep_products = null_percentages_products[null_percentages_products <= 10].index

# Eliminamos las filas con nulos solo en las columnas seleccionadas
df_products.dropna(subset=columns_to_keep_products, inplace=True)

#Chequeo cantidad de null
df_products.isnull().sum()

# Lista de columnas a transfomar en string
columnas_string_products = ["product_id","product_category_name"]

#Aplicamos nuestra funcion conversora de string
df_products = transformarString(df_products, columnas_string_products)

#Revisamos que los tipos de datos sean correctos
df_products.info()

#Aplicamos la conversion a minusculas
df_products = transformarMinusculas(df_products, "product_category_name")

"""#Analisis DataFrame
Una vez realizada la transformacion de datos podemos analizarlos y sacar todos lo necesario para entender mejor a su publico objetivo.

###Funcion para analisis de Dataframes
Realizamos una funcion unica para luego utilizarla con cada nuevo DataFrame
"""

#Definimos una función para analizar nuestro DataFrame
def analisisDataFrames(df): #Nuestro DataFrame como parametro
  print("----------")
  print("Análisis variables cuantitativas")
  columnas_numericas = df.select_dtypes(include=['int', 'float']).columns #Extraemos las columnas numericas
  if not columnas_numericas.empty: #Aplicamos un if en caso de que no haya columnas numericas
    print(df[columnas_numericas].describe()) #Describe para las columnas cuantitativas
  print("----------")
  print("----------")
  print("Análisis variables cualitativas")
  columnas_string = df.select_dtypes(include=['string']).columns #Extraemos las columnas string
  if not columnas_string.empty: #Aplicamos un if en caso de que no haya columnas del tipo string
    print(df[columnas_string].describe()) #Describe para las columnas cualitativas

"""#Customers"""

#Aplicamos la nueva funcion en cada DataFrame
analisisDataFrames(df_customers)

"""Podemos ver que la cantidad de Clientes unicos en el conjunto de datos es de 96096.

#Order Items
"""

#Aplicamos la nueva funcion en cada DataFrame
analisisDataFrames(df_order_items)

"""El promedio de valores de pago por pedidos se encuentra debajo de los 134 Reales. Como podemos ver reflejado en el 75% de las compras.

#Orders
"""

#Aplicamos la nueva funcion en cada DataFrame
analisisDataFrames(df_order)

"""El total de pedidos realizados es de 99441 pedidos.

#Payments
"""

#Aplicamos la nueva funcion en cada DataFrame
analisisDataFrames(df_payments)

"""#Products"""

#Aplicamos la nueva funcion en cada DataFrame
analisisDataFrames(df_products)

#calculamos la categoria de productos mas vendida
df_products['product_category_name'].value_counts()

"""En este analisis encontramos que la categoria de productos mas vendida es la cama_mesa_banho, con una cantidad de 3029 ventas.

#Nuevos DataFrame
Una vez realizados toda la limpieza, analisis y extraccion, realizaremos 2 nuevos DataFrame que exportaremos a CSV para poder realizar el reporte adecuado.
"""

# Crear la carpeta 'dataset_generados'
if not os.path.exists('dataset_generados'):
    os.makedirs('dataset_generados')

"""#Orders - Payments"""

#Realizamos un merge
df_merge_orders_payments = pd.merge(df_order, df_payments, how = "inner", on= "order_id")
df_merge_orders_payments.head()

#Quitamos aquellas columnas que no usaremos
df_merge_orders_payments.drop(['customer_id','order_approved_at','order_delivered_carrier_date','order_delivered_customer_date','order_estimated_delivery_date'], axis=1, inplace=True) #Indicamos el nombre de las columnas y que vamos a mantener los cambios
df_merge_orders_payments.head() #Vemos el resultado

#Exportamos como csv nuestro dataframe
df_merge_orders_payments.to_csv("dataset_generados/orders_payments.csv")

"""#Order Items - Products"""

#Realizamos un merge
df_merge_order_items_products = pd.merge(df_order_items, df_products, how = "inner", on= "product_id")
df_merge_order_items_products.head()

#Quitamos aquellas columnas que no usaremos
df_merge_order_items_products.drop(['product_id','seller_id','shipping_limit_date'], axis=1, inplace=True) #Indicamos el nombre de las columnas y que vamos a mantener los cambios
df_merge_order_items_products.head() #Vemos el resultado

#Exportamos como csv nuestro dataframe
df_merge_order_items_products.to_csv("dataset_generados/order_items_products.csv")